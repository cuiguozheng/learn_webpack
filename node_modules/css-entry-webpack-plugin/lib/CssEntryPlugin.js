"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tapable = require("./interop/tapable");

var _extractTextWebpackPlugin = require("extract-text-webpack-plugin");

var _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);

var _options = require("./options");

var _models = require("./models");

var _CssEntryCompilation = require("./CssEntryCompilation");

var _CssEntryCompilation2 = _interopRequireDefault(_CssEntryCompilation);

var _HtmlWebpackPluginCssEntryFix = require("./HtmlWebpackPluginCssEntryFix");

var _HtmlWebpackPluginCssEntryFix2 = _interopRequireDefault(_HtmlWebpackPluginCssEntryFix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CssEntryPlugin {
    /**
     * Creates a new instance of the CssEntryPlugin.
     * @param options The configuration options (required).
     */
    constructor(options) {
        this.options = (0, _options.normalizeOptions)(options);
    }
    /**
     * Called once by the compiler when installing the plugin.
     * @param compiler The compiler instance.
     */
    apply(compiler) {
        // We will use a single ExtractTextPlugin to extract the css entries
        let extractTextPlugin = new _extractTextWebpackPlugin2.default({
            disable: this.options.disable,
            filename: this.options.output.filename
        });
        compiler.apply(extractTextPlugin);
        // Using 'this-compilation' (do not hook into child compilations)
        compiler.plugin("this-compilation", (compilation, params) => {
            extractTextPlugin.options.disable = this.options.disable;
            if (this.options.disable === true) return;
            // Creating a CssEntryCompilation scoped to the new Compilation instance
            let cssEntryCompilation = new _CssEntryCompilation2.default(this.options, compiler, compilation, extractTextPlugin);
            (0, _models.getCssEntryPluginCompilation)(compilation).applyPlugins("css-entry-compilation", cssEntryCompilation);
            params.normalModuleFactory.plugin("after-resolve", (0, _tapable.toAsyncWaterfallHandler)(data => cssEntryCompilation.onNormalModuleFactoryAfterResolve(data)));
            compilation.plugin("after-seal", (0, _tapable.toAsyncHandler)(() => cssEntryCompilation.onCompilationAfterSeal()));
            compilation.apply(new _HtmlWebpackPluginCssEntryFix2.default());
        });
    }
    /**
     * Enables the plugin.
     */
    enable() {
        this.options.disable = false;
    }
    /**
     * Disables the plugin.
     */
    disable() {
        this.options.disable = true;
    }
}
exports.default = CssEntryPlugin;
module.exports = exports["default"];