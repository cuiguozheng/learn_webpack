import { EntryInfo } from "./models";
export declare function normalizeOptions(options?: Options): NormalizedOptions;
export declare type EntryCondition = RegExp | string | string[] | ((entry: EntryInfo) => boolean);
export declare type EntryResourceCondition = RegExp | ((resource: string, entry: EntryInfo) => boolean);
export interface OptionsObject {
    disable?: boolean;
    /**
     * Output options.
     */
    output?: OutputOptions;
    /**
     * The condition for the entries to include.
     */
    entries?: EntryCondition;
    /**
     * The condition for the entries to ignore.
     */
    ignoreEntries?: EntryCondition;
    /**
     * Which file extensions will be valid in a css entry.
     */
    extensions?: string | string[];
    /**
     * A condition to match valid files for css entries.
     */
    test?: EntryResourceCondition;
}
export interface OutputOptions {
    /**
     * This option determines the name of each output bundle.
     * The bundle is written to the directory specified
     * by the output.path option (specified in the Webpack configuration).
     */
    filename?: FilenameOption;
}
export declare type FilenameTemplate = string;
export declare type GetPathFunction = (template: FilenameTemplate) => string;
export declare type FilenameDynamicOption = (getPath: GetPathFunction) => string;
export declare type FilenameOption = FilenameTemplate | FilenameDynamicOption;
export declare type Options = FilenameOption | OptionsObject;
export interface NormalizedOutputOptions {
    filename: FilenameOption;
}
export interface NormalizedOptions {
    disable: boolean;
    output: NormalizedOutputOptions;
    includeCssEntry: IncludeCssEntryFunction;
    isCssResource: IsCssResourceFunction;
}
export declare type IncludeCssEntryFunction = (entry: EntryInfo) => boolean;
export declare type IsCssResourceFunction = (resource: string, entry: EntryInfo) => boolean;
