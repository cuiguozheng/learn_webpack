"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tslib = require("tslib");

var tslib_1 = _interopRequireWildcard(_tslib);

var _tapable = require("./interop/tapable");

var _htmlWebpackPlugin = require("./interop/html-webpack-plugin");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

class HtmlWebpackPluginCssEntryFix {
    apply(compilation) {
        // Support for HtmlWebpackPlugin interop
        (0, _htmlWebpackPlugin.getHtmlWebpackPluginCompilation)(compilation).plugin("html-webpack-plugin-alter-asset-tags", (0, _tapable.toAsyncWaterfallHandler)(htmlData => this.onHtmlWebpackPluginAlterAssetTags(htmlData)));
    }
    /**
     * Called by the HtmlWebpackPlugin for other plugins to change the assetTag definitions.
     * @param htmlPluginData The html plugin data that contains the asset tags.
     * @param callback The callback to call when ready.
     * @see https://github.com/jantimon/html-webpack-plugin/blob/master/index.js
     * @see https://github.com/jantimon/html-webpack-plugin#events
     */
    // TODO: Create fix PR to https://github.com/jantimon/html-webpack-plugin/blob/master/index.js
    onHtmlWebpackPluginAlterAssetTags(htmlData) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const filterFn = tag => !(tag.tagName === "script" && tag.attributes.src.match(/\.css$/));
            htmlData.head = htmlData.head.filter(filterFn);
            htmlData.body = htmlData.body.filter(filterFn);
            return htmlData;
        });
    }
}
exports.default = HtmlWebpackPluginCssEntryFix;
module.exports = exports["default"];